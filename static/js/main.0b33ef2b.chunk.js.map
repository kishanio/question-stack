{"version":3,"sources":["components/Question.tsx","components/QuestionList.tsx","components/QuestionWrapper.tsx","components/Root.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","root","width","backgroundColor","palette","background","paper","inline","display","spreadWrapper","justifyContent","props","useState","open","setOpen","classes","Fragment","Dialog","onClose","DialogTitle","question","title","DialogContent","dangerouslySetInnerHTML","__html","body","DialogActions","Button","onClick","window","link","color","ListItem","button","className","ListItemAvatar","Avatar","alt","owner","displayName","src","avatar","ListItemText","primary","secondaryTypographyProps","secondary","Typography","component","variant","moment","unix","creationDate","fromNow","Divider","List","disablePadding","questions","map","q","idx","Question","key","setQuestions","endPage","setEndPage","page","setPage","fetchQuestions","a","console","log","setLoading","fetch","response","json","newQuestions","items","i","display_name","profile_image","creation_date","scrollEvent","totalScrolled","innerHeight","document","documentElement","scrollTop","pageHeight","offsetHeight","useEffect","addEventListener","removeEventListener","loading","Grid","container","item","xs","QuestionList","layoutTheme","createMuiTheme","main","position","top","left","zIndex","Boolean","location","hostname","match","ReactDOM","render","CssBaseline","ThemeProvider","LinearProgress","AppBar","elevation","Toolbar","QuestionWrapper","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b33ef2b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Avatar,\n  Typography,\n  Divider,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { QuestionInterface } from \"./QuestionWrapper\";\nimport moment from \"moment\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\",\n    backgroundColor: theme.palette.background.paper\n  },\n  inline: {\n    display: \"inline\"\n  },\n  spreadWrapper: {\n    display: \"flex\",\n    justifyContent: \"space-between\"\n  }\n}));\n\nexport default (props: { question: QuestionInterface }) => {\n  const [open, setOpen] = useState(false);\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <Dialog\n        onClose={() => {\n          setOpen(false);\n        }}\n        open={open}\n      >\n        <DialogTitle>{props.question.title}</DialogTitle>\n        <DialogContent>\n          <div dangerouslySetInnerHTML={{ __html: props.question.body }}></div>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={() => {\n              setOpen(false);\n            }}\n          >\n            Close\n          </Button>\n          <Button\n            onClick={() => {\n              window.open(props.question.link);\n            }}\n            color=\"primary\"\n          >\n            Goto Stack Overflow\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <ListItem\n        button\n        onClick={() => {\n          setOpen(true);\n        }}\n        className={classes.root}\n      >\n        <ListItemAvatar>\n          <Avatar\n            alt={props.question.owner.displayName}\n            src={props.question.owner.avatar}\n          />\n        </ListItemAvatar>\n        <ListItemText\n          primary={props.question.title}\n          secondaryTypographyProps={{\n            className: classes.spreadWrapper\n          }}\n          secondary={\n            <>\n              <Typography\n                component=\"span\"\n                variant=\"body2\"\n                color=\"textPrimary\"\n                className={classes.inline}\n              >\n                {props.question.owner.displayName}\n              </Typography>\n              {moment.unix(props.question.creationDate).fromNow()}\n            </>\n          }\n        />\n      </ListItem>\n      <Divider variant=\"inset\" component=\"li\" />\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport { List } from \"@material-ui/core\";\n\nimport { QuestionInterface } from \"./QuestionWrapper\";\nimport Question from \"./Question\";\n\nexport default (props: { questions: Array<QuestionInterface> }) => {\n  return (\n    <List disablePadding={true}>\n      {props.questions.map((q, idx: number) => (\n        <Question question={q} key={idx} />\n      ))}\n    </List>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport QuestionList from \"./QuestionList\";\n\nconst stackApiUrl = `https://api.stackexchange.com/2.2`;\n\nexport interface QuestionInterface {\n  title: string;\n  owner: { displayName: string; avatar: string };\n  body: string;\n  creationDate: number;\n  link: string;\n}\n\nexport default (props: { setLoading: Function; loading: boolean }) => {\n  const [questions, setQuestions] = useState<Array<QuestionInterface>>([]);\n  const [endPage, setEndPage] = useState(0);\n  const [page, setPage] = useState<number>(1);\n\n  const fetchQuestions = async () => {\n    console.log(`Fetching ${page}`);\n    props.setLoading(true);\n    let response: any = await fetch(\n      `${stackApiUrl}/questions?page=${page}&pagesize=20&order=desc&sort=creation&site=stackoverflow&filter=withBody`\n    );\n\n    let newQuestions: any = await response.json();\n\n    props.setLoading(false);\n    setQuestions([\n      ...questions,\n      ...newQuestions.items.map((i: any) => ({\n        title: i.title,\n        owner: {\n          displayName: i.owner.display_name,\n          avatar: i.owner.profile_image\n        },\n        creationDate: i.creation_date,\n        body: i.body,\n        link: i.link\n      }))\n    ]);\n  };\n\n  const scrollEvent = () => {\n    const totalScrolled =\n      window.innerHeight + document.documentElement.scrollTop;\n\n    const pageHeight = document.documentElement.offsetHeight;\n    console.log(\"scrolling\", totalScrolled, pageHeight);\n    if (totalScrolled < pageHeight / 2) {\n      return;\n    }\n\n    setEndPage(window.innerHeight + document.documentElement.scrollTop);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", scrollEvent);\n\n    return () => {\n      window.removeEventListener(\"scroll\", () => {\n        console.log(\"Listner Remove\");\n      });\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!props.loading) {\n      setPage(page + 1);\n    }\n  }, [endPage]);\n\n  useEffect(() => {\n    fetchQuestions();\n  }, [page]);\n\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        <QuestionList questions={questions} />\n      </Grid>\n    </Grid>\n  );\n};\n","import React, { useState } from \"react\";\nimport {\n  CssBaseline,\n  AppBar,\n  Toolbar,\n  Typography,\n  LinearProgress\n} from \"@material-ui/core\";\nimport {\n  createMuiTheme,\n  ThemeProvider,\n  makeStyles\n} from \"@material-ui/core/styles\";\n\nimport QuestionWrapper from \"./QuestionWrapper\";\n\nconst layoutTheme = createMuiTheme({\n  palette: {\n    secondary: {\n      main: \"#eeeeee\"\n    },\n    primary: {\n      main: \"#233d4d\"\n    }\n  }\n});\n\nconst useStyles = makeStyles(theme => ({\n  loading: {\n    position: \"fixed\",\n    width: \"100%\",\n    top: 0,\n    left: 0,\n    zIndex: 1\n  }\n}));\n\nexport default () => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <ThemeProvider theme={layoutTheme}>\n        {loading && <LinearProgress className={classes.loading} />}\n        <AppBar elevation={0} position=\"static\">\n          <Toolbar variant=\"dense\">\n            <Typography color=\"inherit\" variant=\"h6\">\n              Question Stack\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <QuestionWrapper loading={loading} setLoading={setLoading} />\n      </ThemeProvider>\n    </React.Fragment>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Root from \"./components/Root\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n\nserviceWorker.unregister(); // no need for offline\n"],"sourceRoot":""}